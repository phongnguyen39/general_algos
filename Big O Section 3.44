// Loops in Javascript can be written several different ways:
// for-loop or forEach or while or ES5 or ES6

const {performance} = require('perf_hooks');

const nemo = ['nemo'];
const everyone = [
  'dory','bruce','marlin', 'nemo', 'gill','bloat','nigel'
]

const large = new Array(1000).fill('nemo')


// FIRST EXAMPLE, FIRST SET OF INSTRUCTIONS TO THE COMPUTER

// function findNemo(array){
//   for (let i = 0; i < array.length; i++){
//     if(array[i] === 'nemo'){
//       console.log('Found Nemo!');
//     }
//   }
// }
// findNemo(nemo);

// SECOND EXAMPLE, SECOND SET OF INSTRUCTIONS TO THE COMPUTER
// the second example fails because 0 is always less than the length.  It gets stuck in infinite loop

function findNemo(array){
  let t0 = performance.now();
  for (let i = 0; i < array.length; i++){
    if(array[i] === 'nemo'){
      console.log('Found Nemo!');
    }
  }
  let t1 = performance.now();
  console.log('Call to find Nemo took ' + (t1 - t0) + 'milliseconds')
}
// findNemo(nemo);   //approx 2.04 ms
// findNemo(everyone); // approx .05 ms
// findNemo(large);  // approx. 68.2 ms

const boxes = [0,1,2,3,4,5]
function logFirstTwoBoxes(boxes){
  console.log(boxes[0]);
  console.log(boxes[1]);
}
logFirstTwoBoxes(boxes) // O(2) operations, not O(1) but it is constant

// function written using foreach
const findNemo2(array){
  array.forEach( fish => {
    if(fish === 'nemo') {
      console.log("Nemo found")
    }
  })
}

const findNemo3(array){
  for(let fish of array){
    if(fish === 'nemo') {
      console.log("Nemo found")
    }
  }
}

findNemo2(everyone)
findNemo3(everyone)
