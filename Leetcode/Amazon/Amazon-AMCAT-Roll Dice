// Amazon Roll Dice
// six sided dice (1 - 6 on each face)
// opposite faces:  [1,6], [2,5], [3,4]  each pair totaling 7

// objective:  roll each dice so the same number are facing up on top the n die.  Count the min number of moves needed to show the same face on all die

// observations:  each number has four faces it can flip to in a single flip & 1 face it has to flip twice to

function rollDice(arr) {
  // check for mode, then flip all the other die to reach it
  // if there is no mode,  we need to check all possible solutions and then pick the smallest number
  // const pips = [1,2,3,4,5,6];
  const dict = {};

  // DICTIONARY USING SINGLE LOOP O(n)
  for (let k = 0; k < 6; k++) {
    // wherever k is, then that is zero
    // pips.length - 1 - k then will equal 2
    const pipsArray = [1, 1, 1, 1, 1, 1];
    pipsArray[k] = 0;
    pipsArray[pipsArray.length - 1 - k] = 2;
    dict[k + 1] = pipsArray; // 0,1,2
  }
  console.log(dict)


  let dict2 = {}
  for (let i = 0; i < arr.length; i++) {
    dict2[arr[i]] != null ? dict2[arr[i]] += 1 : dict2[arr[i]] = 1
  }
  let mode = [-Infinity, -1]
  let median = 0;
  for (let key in dict2) {
    if (dict2[key] > mode[0]) {
      mode[0] = dict2[key]
      mode[1] = key
    }
    median += dict2[key] * parseInt(key)
  }
  median = Math.round(median / arr.length);
  let count = 0;
  let count2 = 0;
  for (let i = 0; i < arr.length; i++) {
    count += dict[arr[i]][parseInt(mode[1]) - 1]
    count2 += dict[arr[i]][median - 1]
  }
  return Math.min(count, count2)
}

rollDice([1, 2, 3]) // expected two because 1 = > 3 and 2 => 3 can be in a single turn
// console.log(rollDice([1,1,6])) // expected two
// console.log(rollDice([1,6,2,3])) // expected 3


// // DICTIONARY USING NESTED FOR LOOP O(n^2)
//   for( let i = 0; i < pips.length; i++ ) {
//     // create a key and create a value
//     const pipsArray = [];

//     for(let j = 0; j < pips.length; j++){
//       if(pips[i] == pips[j]){
//         pipsArray.push(0);
//       } else if (7 ==  (pips[i] + pips[j])){
//         pipsArray.push(2);
//       } else {
//         pipsArray.push(1);
//       } 
//     }
//     pipDict[pips[i]] = pipsArray; // 0,1,2
//   }

// n represents variable number of dice on table each with a face up
// one move means it can move to an adjacent face:  
// potential moves:
// either 1,2,3,4,5,6 can be up.   
// 1:  2, 3, 4, 5    everything except opposite face
// 2:  1, 3, 4, 6    everything except opposite face
// 3:  1, 2, 5, 6    everything except opposite face
// 4:  1, 2, 5, 6    everything except opposite face
// 5:  1, 3, 4, 6    everything except opposite face
// 6:  2, 3, 4, 5    everything except opposite face
