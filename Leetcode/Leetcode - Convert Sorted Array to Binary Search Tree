/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {number[]} nums
 * @return {TreeNode}
 */
var sortedArrayToBST = function(nums) { 
    
    if(nums.length == 0 || !nums )
    {
        return null;   
    }
        
    // finding mid splits the sorted array in half, left half of array equates to left subtree, vice versa for right
    let mid = Math.floor(nums.length / 2),
        
    // setting the root to the middle value of array
    root = new TreeNode(nums[mid]);
        
    // recursive calls to build subsequent left and right nodes, notice how root travels
    if(nums.slice(0, mid).length > 0)
        root.left = sortedArrayToBST(nums.slice(0, mid));
    if(nums.slice(mid + 1).length > 0)
        root.right = sortedArrayToBST(nums.slice(mid + 1));
        
    return root;
    
    
    
    
};
