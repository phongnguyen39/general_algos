class Node {
  constructor(value) {
    this.value = value;
    this.left = null;
    this.right = null;
  }
}

class BinarySearchTree {
  constructor() {
    this.root = null;
  }

  insert(value) {
    // create new node
    const newNode = new Node(value)

    // Check if there is a root, if not then set it to root
    // if there is a root, then two conditions
    if (this.root == null) {
      this.root = newNode;
    } else {

      // two conditions, if greater than root then set child to right, if less than root then left  
      // Remember: you need temps to hold values and help tack them on
      let currentNode = this.root;
      while (true) {
        if (value < currentNode.value) {
          //left
          if (!currentNode.left) {
            currentNode.left = newNode;
            return this;
          }
          currentNode = currentNode.left;
        } else {
          //right
          if (!currentNode.right) {
            currentNode.right = newNode;
            return this;
          }
          currentNode = currentNode.right;
        }
      }
      this.root.left = newNode;
    }
    if (this.root != null && newNode.value > this.root.value) {
      this.root.right = newNode;
    }
  }

  lookup(value) {
    if (this.root == null) {
      return false;
    } else {
      let currentNode = this.root;
      while (currentNode) {
        if (value < currentNode.value) {
          currentNode = currentNode.left;
        } else if (value > currentNode.value) {
          currentNode = currentNode.right;
        }
        else if (value == currentNode.value) {
          console.log("node found ", currentNode)
          return currentNode;
        }
      }
    }
    console.log(false, 'Node not found')
    return false;
  }

  remove() {

  }
}

const tree = new BinarySearchTree();
tree.insert(9);
tree.insert(4);
tree.insert(6);
tree.insert(20);
tree.insert(170);
tree.insert(15);
tree.insert(1);
tree.lookup(10);
tree.lookup(170);


// function below traverse and helps display the BST above
JSON.stringify(traverse(tree.root))

function traverse(node) {
  const tree = { value: node.value };
  tree.left = node.left === null ? null :
    traverse(node.left);
  tree.right = node.right === null ? null :
    traverse(node.right);
  return tree;
}

// Calculating the number of nodes at a level
// Level 0: 2^0 => 1
// Level 1: 2^1 => 2
// Level 2: 2^2 => 4
// Level 3: 2^3 => 8   this means that thre are eight nodes at lvl 3, that we may have to iterate through

// To figure out the total number of nodes = 2^h -1
// log nodes = height or steps in a tree
// log 100 = 2 which is the reverse of 10^2


// ** In the video it shows 54 instead of 104 **
